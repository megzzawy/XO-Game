import java.util.Scanner;

public abstract class Game {
    protected Board board;
    protected Player[] players;
    protected int currentPlayerIndex;

    public Game(Board board, Player[] players) {
        this.board = board;
        this.players = players;
        this.currentPlayerIndex = 0;
    }

    public void play() {
        while (!isGameOver()) {
            board.displayBoard();
            Player currentPlayer = players[currentPlayerIndex];
            currentPlayer.makeMove(board);
            currentPlayerIndex = (currentPlayerIndex + 1) % players.length;
        }
        board.displayBoard();
        displayWinner();
    }

    protected abstract boolean isGameOver();
    protected abstract void displayWinner();
}

abstract class Board {
    protected int size;
    protected char[][] cells;

    public Board(int size) {
        this.size = size;
        this.cells = new char[size][size];
        for (int i = 0; i < size; i++) {
            for (int j = 0; j < size; j++) {
                cells[i][j] = ' ';
            }
        }
    }

    public void displayBoard() {
        for (int i = 0; i < size; i++) {
            for (int j = 0; j < size; j++) {
                System.out.print("| " + cells[i][j] + " ");
            }
            System.out.println("|");
        }
    }

    public boolean makeMove(int row, int col, char symbol) {
        if (cells[row][col] == ' ') {
            cells[row][col] = symbol;
            return true;
        } else {
            return false;
        }
    }

    protected abstract boolean hasWinner();
}

abstract class Player {
    protected char symbol;

    public Player(char symbol) {
        this.symbol = symbol;
    }

    public abstract void makeMove(Board board);
}

class TicTacToe extends Game {
    public TicTacToe(Board board, Player[] players) {
        super(board, players);
    }

    @Override
    protected boolean isGameOver() {
        return board.hasWinner() || isBoardFull();
    }

    @Override
    protected void displayWinner() {
        if (board.hasWinner()) {
            System.out.println("Player " + players[currentPlayerIndex].symbol + " wins!");
        } else {
            System.out.println("Tie game!");
        }
    }

    private boolean isBoardFull() {
        for (int i = 0; i < board.size; i++) {
            for (int j = 0; j < board.size; j++) {
                if (board.cells[i][j] == ' ') {
                    return false;
                }
            }
        }
        return true;
    }
}

class TicTacToeBoard extends Board {
    public TicTacToeBoard(int size) {
        super(size);
    }

    @Override
    protected boolean hasWinner() {
        for (int i = 0; i < size; i++) {
            // Check rows
            if (cells[i][0] != ' ' && cells[i][0] == cells[i][1] && cells[i][1] == cells[i][2]) {
                return true;
            }
            // Check columns
            if (cells[0][i] != ' ' && cells[0][i] == cells[1][i] && cells[1][i] == cells[2][i]) {
                return true;
            }
        }
        // Check diagonals
        if (cells[0][0] != ' ' && cells
